{"version":3,"sources":["components/square.jsx","components/board.jsx","components/toggle-sort.jsx","components/move-list-item.jsx","components/move-list.jsx","components/toggle-move-list.jsx","index.jsx"],"names":["Square","_this$props","this","props","isWinner","onClick","value","i","clasname","react_default","a","createElement","className","type","React","PureComponent","defaultProps","Board","renderSquare","_this","squares","winnerSquares","components_square","key","concat","includes","board","row","rowComps","col","push","Component","ToggleSort","id","htmlFor","data-tg-off","data-tg-on","MoveListItems","move","desc","resultDesc","isBold","MoveList","history","stepNumber","map","step","currMove","Math","floor","move_list_item","Object","assign","ToggleMoveList","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleToggle","isMoveSortDesc","state","setState","components_toggle_sort","components_move_list","getWinnerAndwinSquares","winLine","find","line","_line","slicedToArray","b","c","winner","winSquares","Game","nextPlayer","isNextTurnPlayerX","handleBoardClick","_this$state","historyToStep","slice","winnerAndwinSquares","length","handleMoveListClick","_this$state2","Array","fill","status","_this$state3","current","isDraw","src_components_board","toggle_move_list","ReactDOM","render","src_Game","document","getElementById"],"mappings":"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","file":"static/js/main.5ebacc3c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './square.scss';\n\nclass Square extends React.PureComponent {\n  render() {\n    const {\n      isWinner, onClick, value, i,\n    } = this.props;\n    const clasname = isWinner ? 'square square-winner' : 'square';\n    return (\n      <button className={clasname} onClick={() => onClick(i)} type=\"button\">\n        {value}\n      </button>\n    );\n  }\n}\n\nSquare.propTypes = {\n  isWinner: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n  value: PropTypes.string,\n  i: PropTypes.number.isRequired,\n};\n\nSquare.defaultProps = {\n  value: '',\n};\n\nexport default Square;\n","/* eslint-disable jsx-a11y/label-has-for */\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Square from './square';\nimport './board.scss';\n\nclass Board extends React.Component {\n  renderSquare = (i) => {\n    const { squares, winnerSquares, onClick } = this.props;\n    return (\n      <Square\n        key={`square${i}`}\n        value={squares[i]}\n        isWinner={winnerSquares.includes(i)}\n        i={i}\n        onClick={onClick}\n      />\n    );\n  }\n\n  render() {\n    const cols = 3;\n    const rows = 3;\n    const board = [];\n    for (let row = 0; row <= rows; row += 1) {\n      const rowComps = [];\n      for (let col = 0; col <= cols; col += 1) {\n        if (row === 0 && col === 0) {\n          rowComps.push(<label key=\"row\\col\" className=\"col-row-category\">row\\col</label>);\n        } else if (row === 0) {\n          rowComps.push(<label key={col} className=\"col-title\">{col}</label>);\n        } else if (col === 0) {\n          rowComps.push(<label key={row} className=\"row-title\">{row}</label>);\n        } else {\n          rowComps.push(this.renderSquare((row - 1) * 3 + col - 1));\n        }\n      }\n      board.push(<div key={row} className=\"board-row\">{rowComps}</div>);\n    }\n    return (\n      <div>{board}</div>\n    );\n  }\n}\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(PropTypes.string).isRequired,\n  winnerSquares: PropTypes.arrayOf(PropTypes.number).isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable jsx-a11y/label-has-for */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './toggle-sort.scss';\n\nclass ToggleSort extends React.PureComponent {\n  render() {\n    const { onClick } = this.props;\n    return (\n      <div>\n        <input id=\"tgBtn\" className=\"tgl tgl-skewed\" type=\"checkbox\" onClick={onClick} />\n        <label htmlFor=\"tgBtn\" className=\"tgl-btn\" data-tg-off=\"Ascending\" data-tg-on=\"Descending\" />\n      </div>\n    );\n  }\n}\n\nToggleSort.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default ToggleSort;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './move-list.scss';\n\nclass MoveListItems extends React.PureComponent {\n  render() {\n    const {\n      onClick, move, desc, isBold,\n    } = this.props;\n    const resultDesc = isBold ? <b>{desc}</b> : desc;\n    return (\n      <li className=\"move-list-item\">\n        <button\n          type=\"button\"\n          onClick={() => onClick(move)}\n        >\n          {resultDesc}\n        </button>\n      </li>\n    );\n  }\n}\n\nMoveListItems.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  move: PropTypes.number.isRequired,\n  desc: PropTypes.string.isRequired,\n  isBold: PropTypes.bool.isRequired,\n};\n\nexport default MoveListItems;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MoveListItems from './move-list-item';\nimport './move-list.scss';\n\nclass MoveList extends React.Component {\n  render() {\n    const { history, stepNumber, onClick } = this.props;\n    const moves = history.map((step, move) => {\n      let desc;\n      if (move) {\n        desc = `Go to move # ${move}, `\n          + `${step.squares[step.currMove]} at `\n          + `(col, row) = (${(step.currMove % 3) + 1}, ${Math.floor(step.currMove / 3) + 1})`;\n      } else {\n        desc = 'Go to game start';\n      }\n      return (\n        <MoveListItems\n          key={step.currMove}\n          {...{\n            onClick, move, desc,\n          }}\n          isBold={move === stepNumber}\n        />\n      );\n    });\n    return moves;\n  }\n}\n\nMoveList.propTypes = {\n  history: PropTypes.arrayOf(PropTypes.shape({ squares: PropTypes.array })).isRequired,\n  stepNumber: PropTypes.number.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default MoveList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ToggleSort from './toggle-sort';\nimport MoveList from './move-list';\nimport './move-list.scss';\n\nclass ToggleMoveList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isMoveSortDesc: false,\n    };\n  }\n\n  handleToggle = () => {\n    const { isMoveSortDesc } = this.state;\n    this.setState({ isMoveSortDesc: !isMoveSortDesc });\n  }\n\n  render() {\n    const { isMoveSortDesc } = this.state;\n    const { history, stepNumber, onClick } = this.props;\n    const className = isMoveSortDesc ? 'move-list move-list-reverse' : 'move-list';\n\n    return (\n      <div>\n        <ToggleSort onClick={this.handleToggle} />\n        <ol className={className}>\n          <MoveList {...{ history, stepNumber, onClick }} />\n        </ol>\n      </div>\n    );\n  }\n}\n\nToggleMoveList.propTypes = {\n  history: PropTypes.arrayOf(PropTypes.shape({ squares: PropTypes.array })).isRequired,\n  stepNumber: PropTypes.number.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default ToggleMoveList;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Board from './components/board';\nimport ToggleMoveList from './components/toggle-move-list';\nimport './index.css';\n\nfunction getWinnerAndwinSquares(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  const winLine = lines.find((line) => {\n    const [a, b, c] = line;\n    return (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]);\n  });\n  return {\n    winner: winLine ? squares[winLine[0]] : null,\n    winSquares: winLine || [],\n  };\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n        currMove: -1,\n      }],\n      stepNumber: 0,\n      isNextTurnPlayerX: true,\n      winner: null,\n      winnerSquares: [],\n    };\n  }\n\n  nextPlayer = () => {\n    const { isNextTurnPlayerX } = this.state;\n    return isNextTurnPlayerX ? 'X' : 'O';\n  }\n\n  handleBoardClick = (i) => {\n    const {\n      stepNumber, history, winner, isNextTurnPlayerX,\n    } = this.state;\n    const historyToStep = history.slice(0, stepNumber + 1);\n    const squares = historyToStep[stepNumber].squares.slice();\n    if (winner || squares[i]) {\n      return;\n    }\n    squares[i] = this.nextPlayer();\n    const winnerAndwinSquares = getWinnerAndwinSquares(squares);\n    this.setState({\n      history: historyToStep.concat([{\n        squares,\n        currMove: i,\n      }]),\n      stepNumber: historyToStep.length,\n      isNextTurnPlayerX: !isNextTurnPlayerX,\n      winner: winnerAndwinSquares.winner,\n      winnerSquares: winnerAndwinSquares.winSquares,\n    });\n  }\n\n  handleMoveListClick = (step) => {\n    const { stepNumber, history } = this.state;\n    if (stepNumber === step) return;\n    const winnerAndwinSquares = getWinnerAndwinSquares(history[step].squares);\n    this.setState({\n      stepNumber: step,\n      isNextTurnPlayerX: (step % 2) === 0,\n      winner: winnerAndwinSquares.winner,\n      winnerSquares: winnerAndwinSquares.winSquares,\n    });\n  }\n\n  render() {\n    const {\n      history, stepNumber, winner, winnerSquares,\n    } = this.state;\n    const current = history[stepNumber];\n    const isDraw = !current.squares.includes(null);\n\n    let status;\n    if (winner) {\n      status = `Winner: ${winner}`;\n    } else if (isDraw) {\n      status = 'Draw';\n    } else {\n      status = `Next player: ${this.nextPlayer()}`;\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            winnerSquares={winnerSquares}\n            onClick={this.handleBoardClick}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div className=\"status\">{status}</div>\n          <ToggleMoveList {...{ history, stepNumber }} onClick={this.handleMoveListClick} />\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}